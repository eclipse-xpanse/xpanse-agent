{
  "openapi": "3.1.0",
  "info": {
    "title": "XpanseAPI",
    "description": "RESTful Services to interact with Xpanse runtime.",
    "version": "1.0.25-SNAPSHOT"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Agent Api",
      "description": "APIs for agent to poll pending service change requests."
    }
  ],
  "paths": {
    "/agent/xpanse/update/status/{changeId}": {
      "put": {
        "tags": [
          "Agent Api"
        ],
        "description": "Update service change result for agents.",
        "operationId": "updateServiceChangeResult",
        "parameters": [
          {
            "name": "changeId",
            "in": "path",
            "description": "id of the update request.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceChangeResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agent/xpanse/poll/{serviceId}/{resourceName}": {
      "get": {
        "tags": [
          "Agent Api"
        ],
        "description": "Get pending service change request for agents to poll.",
        "operationId": "getPendingServiceChangeRequest",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The id of the deployed service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "resourceName",
            "in": "path",
            "description": "The name of the resource of deployed service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pending service change update request details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceChangeRequest"
                }
              }
            }
          },
          "204": {
            "description": "no pending service change update requests"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "description": "The result code of response.",
            "enum": [
              "Runtime Error",
              "Parameters Invalid",
              "Terraform Script Invalid",
              "Unprocessable Entity",
              "Response Not Valid",
              "Failure while connecting to backend",
              "Credential Capability Not Found",
              "Credentials Not Found",
              "Credential Variables Not Complete",
              "Flavor Invalid",
              "Terraform Execution Failed",
              "Plugin Not Found",
              "Deployer Not Found",
              "No Credential Definition Available",
              "Invalid Service State",
              "Resource Invalid For Monitoring",
              "Unhandled Exception",
              "Icon Processing Failed",
              "Service Template Not Registered",
              "Service Template Unavailable",
              "Service Template Request Not Allowed",
              "Service Template Request Not Found",
              "Review Service Template Request Not Allowed",
              "Invalid Service Version",
              "Invalid Service Flavors",
              "Mandatory Value Missing",
              "Invalid Billing Config",
              "Unavailable Service Regions",
              "Service Deployment Not Found",
              "Resource Not Found",
              "Deployment Variable Invalid",
              "Unauthorized",
              "Access Denied",
              "Sensitive Field Encryption Or Decryption Failed Exception",
              "Unsupported Enum Value",
              "Terra Boot Request Failed",
              "Tofu Maker Request Failed",
              "Metrics Data Not Ready",
              "Variable Validation Failed",
              "Variable Schema Definition Invalid",
              "Policy Not Found",
              "Duplicate Policy",
              "Policy Validation Failed",
              "Policy Evaluation Failed",
              "Current Login User No Found",
              "Service Details No Accessible",
              "Service Porting Activiti Task Not Found",
              "Service Porting Failed Exception",
              "Service Porting Not Found",
              "Service Locked",
              "Eula Not Accepted",
              "Service Flavor Downgrade Not Allowed",
              "Billing Mode Not Supported",
              "Service State Management Task Not Found",
              "Service Order Not Found",
              "Service Price Calculation Failed",
              "Invalid Git Repo Details",
              "File Locked",
              "Service Configuration Invalid",
              "Service Configuration Update Request Not Found",
              "Service Configuration Not Found",
              "Invalid Deployer Tool",
              "Deployment Scripts Creation Failed",
              "Async Start Service Error",
              "Async Stop Service Error",
              "Async Restart Service Error",
              "Deployment Failed Exception",
              "Destroy Failed Exception",
              "Service Action Invalid"
            ]
          },
          "details": {
            "type": "array",
            "description": "Details of the errors occurred",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "details",
          "errorType"
        ]
      },
      "AnsibleTaskResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the Ansible task"
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Depicts if the task is successful"
          },
          "message": {
            "type": "string",
            "description": "Data from the task. Will be returned both for successful and failure cases."
          }
        },
        "required": [
          "isSuccessful",
          "name"
        ]
      },
      "ServiceChangeResult": {
        "type": "object",
        "description": "result of the service change request.",
        "properties": {
          "isSuccessful": {
            "type": "boolean",
            "description": "describes if the change is successfully executed."
          },
          "error": {
            "type": "string",
            "description": "error description if the task failed."
          },
          "tasks": {
            "type": "array",
            "description": "describes result of each Ansible task executed by the agent.",
            "items": {
              "$ref": "#/components/schemas/AnsibleTaskResult"
            }
          }
        },
        "required": [
          "isSuccessful"
        ]
      },
      "AnsibleScriptConfig": {
        "type": "object",
        "properties": {
          "playbookName": {
            "type": "string",
            "description": "name of the ansible playbook. Should be the fully qualified file name (including the directory path) in the repo.",
            "example": "playbook-name.yml"
          },
          "virtualEnv": {
            "type": "string",
            "description": "Path where the virtualenv must be created.",
            "example": "/tmp/virtualEnv"
          },
          "pythonVersion": {
            "type": "string",
            "description": "Version of the python. This version of python must be available in node which is acting as the configManager.",
            "example": 3.1
          },
          "isPrepareAnsibleEnvironment": {
            "type": "boolean",
            "description": "The agent will prepare the virtual environment if this true.Otherwise it is assumed that the environment is already prepared as part of the resource creation or the VM base image build."
          },
          "repoUrl": {
            "type": "string",
            "description": "Url of the script repo."
          },
          "branch": {
            "type": "string",
            "description": "Branch of the git repo."
          },
          "requirementsFile": {
            "type": "string",
            "description": "the python module requirements file in GIT repo. Should be the fully qualified file name (including the directory path). ",
            "example": "modules/requirements.txt"
          },
          "galaxyFile": {
            "type": "string",
            "description": "Full path of the roles and collections requirements file in GIT repo."
          },
          "ansibleInventoryRequired": {
            "type": "boolean",
            "description": "Defines if the complete service inventory is necessary for running the ansible job."
          }
        },
        "required": [
          "branch",
          "galaxyFile",
          "isPrepareAnsibleEnvironment",
          "playbookName",
          "pythonVersion",
          "repoUrl",
          "requirementsFile",
          "virtualEnv"
        ]
      },
      "ServiceChangeRequest": {
        "type": "object",
        "properties": {
          "changeId": {
            "type": "string",
            "format": "uuid",
            "description": "Id of the change request"
          },
          "serviceChangeParameters": {
            "type": "object",
            "additionalProperties": true,
            "description": "request parameters to be used to execute the change scripts. In case of Ansible, this will be used as extra vars."
          },
          "ansibleScriptConfig": {
            "$ref": "#/components/schemas/AnsibleScriptConfig",
            "description": "defines the ansible script information."
          },
          "ansibleInventory": {
            "type": "object",
            "additionalProperties": true,
            "description": "Inventory information for Ansible script."
          }
        },
        "required": [
          "changeId",
          "serviceChangeParameters"
        ]
      }
    }
  }
}