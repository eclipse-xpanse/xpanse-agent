// Package xpanseclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package xpanseclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResponseResultType.
const (
	AccessDenied                                        ResponseResultType = "Access Denied"
	BillingModeNotSupported                             ResponseResultType = "Billing Mode Not Supported"
	CredentialCapabilityNotFound                        ResponseResultType = "Credential Capability Not Found"
	CredentialVariablesNotComplete                      ResponseResultType = "Credential Variables Not Complete"
	CredentialsNotFound                                 ResponseResultType = "Credentials Not Found"
	CurrentLoginUserNoFound                             ResponseResultType = "Current Login User No Found"
	DeployerNotFound                                    ResponseResultType = "Deployer Not Found"
	DeploymentVariableInvalid                           ResponseResultType = "Deployment Variable Invalid"
	DuplicatePolicy                                     ResponseResultType = "Duplicate Policy"
	EulaNotAccepted                                     ResponseResultType = "Eula Not Accepted"
	FailureWhileConnectingToBackend                     ResponseResultType = "Failure while connecting to backend"
	FileLocked                                          ResponseResultType = "File Locked"
	FlavorInvalid                                       ResponseResultType = "Flavor Invalid"
	IconProcessingFailed                                ResponseResultType = "Icon Processing Failed"
	InvalidBillingConfig                                ResponseResultType = "Invalid Billing Config"
	InvalidGitRepoDetails                               ResponseResultType = "Invalid Git Repo Details"
	InvalidServiceFlavors                               ResponseResultType = "Invalid Service Flavors"
	InvalidServiceState                                 ResponseResultType = "Invalid Service State"
	InvalidServiceVersion                               ResponseResultType = "Invalid Service Version"
	MetricsDataNotReady                                 ResponseResultType = "Metrics Data Not Ready"
	MigratingActivitiTaskNotFound                       ResponseResultType = "Migrating activiti Task Not Found"
	NoCredentialDefinitionAvailable                     ResponseResultType = "No Credential Definition Available"
	ParametersInvalid                                   ResponseResultType = "Parameters Invalid"
	PluginNotFound                                      ResponseResultType = "Plugin Not Found"
	PolicyEvaluationFailed                              ResponseResultType = "Policy Evaluation Failed"
	PolicyNotFound                                      ResponseResultType = "Policy Not Found"
	PolicyValidationFailed                              ResponseResultType = "Policy Validation Failed"
	ResourceInvalidForMonitoring                        ResponseResultType = "Resource Invalid For Monitoring"
	ResourceNotFound                                    ResponseResultType = "Resource Not Found"
	ResponseNotValid                                    ResponseResultType = "Response Not Valid"
	RuntimeError                                        ResponseResultType = "Runtime Error"
	SensitiveFieldEncryptionOrDecryptionFailedException ResponseResultType = "Sensitive Field Encryption Or Decryption Failed Exception"
	ServiceConfigurationInvalid                         ResponseResultType = "Service Configuration Invalid"
	ServiceConfigurationUpdateRequestNotFound           ResponseResultType = "Service Configuration Update Request Not Found"
	ServiceDeploymentNotFound                           ResponseResultType = "Service Deployment Not Found"
	ServiceDetailsNoAccessible                          ResponseResultType = "Service Details No Accessible"
	ServiceFlavorDowngradeNotAllowed                    ResponseResultType = "Service Flavor Downgrade Not Allowed"
	ServiceLocked                                       ResponseResultType = "Service Locked"
	ServiceMigrationFailedException                     ResponseResultType = "Service Migration Failed Exception"
	ServiceMigrationNotFound                            ResponseResultType = "Service Migration Not Found"
	ServiceOrderNotFound                                ResponseResultType = "Service Order Not Found"
	ServicePriceCalculationFailed                       ResponseResultType = "Service Price Calculation Failed"
	ServiceStateManagementTaskNotFound                  ResponseResultType = "Service State Management Task Not Found"
	ServiceTemplateAlreadyRegistered                    ResponseResultType = "Service Template Already Registered"
	ServiceTemplateAlreadyReviewed                      ResponseResultType = "Service Template Already Reviewed"
	ServiceTemplateNotApproved                          ResponseResultType = "Service Template Not Approved"
	ServiceTemplateNotRegistered                        ResponseResultType = "Service Template Not Registered"
	ServiceTemplateStillInUse                           ResponseResultType = "Service Template Still In Use"
	ServiceTemplateUpdateNotAllowed                     ResponseResultType = "Service Template Update Not Allowed"
	Success                                             ResponseResultType = "Success"
	TerraformBootRequestFailed                          ResponseResultType = "Terraform Boot Request Failed"
	TerraformExecutionFailed                            ResponseResultType = "Terraform Execution Failed"
	TerraformScriptInvalid                              ResponseResultType = "Terraform Script Invalid"
	TofuMakerRequestFailed                              ResponseResultType = "Tofu Maker Request Failed"
	Unauthorized                                        ResponseResultType = "Unauthorized"
	UnavailableServiceRegions                           ResponseResultType = "Unavailable Service Regions"
	UnhandledException                                  ResponseResultType = "Unhandled Exception"
	UnprocessableEntity                                 ResponseResultType = "Unprocessable Entity"
	UnsupportedEnumValue                                ResponseResultType = "Unsupported Enum Value"
	VariableSchemaDefinitionInvalid                     ResponseResultType = "Variable Schema Definition Invalid"
	VariableValidationFailed                            ResponseResultType = "Variable Validation Failed"
)

// AnsibleScriptConfig defines model for AnsibleScriptConfig.
type AnsibleScriptConfig struct {
	// AnsibleInventoryRequired Defines if the complete service inventory is necessary for running the ansible job.
	AnsibleInventoryRequired *bool `json:"ansibleInventoryRequired,omitempty"`

	// Branch Branch of the git repo.
	Branch string `json:"branch"`

	// GalaxyFile Full path of the roles and collections requirements file in GIT repo.
	GalaxyFile string `json:"galaxyFile"`

	// IsPrepareAnsibleEnvironment The agent will prepare the virtual environment if this true.Otherwise it is assumed that the environment is already prepared as part of the resource creation.
	IsPrepareAnsibleEnvironment bool `json:"isPrepareAnsibleEnvironment"`

	// PlaybookName name of the ansible playbook. Should be the fully qualified file name (including the directory path) in the repo.Eg.,'playbook-name.yml'
	PlaybookName string `json:"playbookName"`

	// PythonVersion Version of the python. This version of python must be available in node which is acting as the configManager.
	PythonVersion float32 `json:"pythonVersion"`

	// RepoUrl Url of the script repo.
	RepoUrl string `json:"repoUrl"`

	// RequirementsFile the python module requirements file in GIT repo. Should be the fully qualified file name (including the directory path). E.g modules/requirements.txt
	RequirementsFile string `json:"requirementsFile"`

	// VirtualEnv Path where the virtualenv is created.
	VirtualEnv string `json:"virtualEnv"`
}

// AnsibleTaskResult defines model for AnsibleTaskResult.
type AnsibleTaskResult struct {
	IsSuccessful *bool   `json:"isSuccessful,omitempty"`
	Message      *string `json:"message,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// Response defines model for Response.
type Response struct {
	// Details Details of the errors occurred
	Details []string `json:"details"`

	// ResultType The result code of response.
	ResultType ResponseResultType `json:"resultType"`

	// Success Describes if the request is successful
	Success bool `json:"success"`
}

// ResponseResultType The result code of response.
type ResponseResultType string

// ServiceConfigurationChangeRequest defines model for ServiceConfigurationChangeRequest.
type ServiceConfigurationChangeRequest struct {
	AnsibleInventory    *map[string]interface{} `json:"ansibleInventory,omitempty"`
	AnsibleScriptConfig *AnsibleScriptConfig    `json:"ansibleScriptConfig,omitempty"`
	ChangeId            *openapi_types.UUID     `json:"changeId,omitempty"`
	ConfigParameters    *map[string]interface{} `json:"configParameters,omitempty"`
}

// ServiceConfigurationChangeResult result of the service configuration update request.
type ServiceConfigurationChangeResult struct {
	Error        *string              `json:"error,omitempty"`
	IsSuccessful *bool                `json:"isSuccessful,omitempty"`
	Tasks        *[]AnsibleTaskResult `json:"tasks,omitempty"`
}

// UpdateConfigurationChangeResultJSONRequestBody defines body for UpdateConfigurationChangeResult for application/json ContentType.
type UpdateConfigurationChangeResultJSONRequestBody = ServiceConfigurationChangeResult

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPendingConfigurationChangeRequest request
	GetPendingConfigurationChangeRequest(ctx context.Context, serviceId string, resourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConfigurationChangeResultWithBody request with any body
	UpdateConfigurationChangeResultWithBody(ctx context.Context, changeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConfigurationChangeResult(ctx context.Context, changeId string, body UpdateConfigurationChangeResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPendingConfigurationChangeRequest(ctx context.Context, serviceId string, resourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPendingConfigurationChangeRequestRequest(c.Server, serviceId, resourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfigurationChangeResultWithBody(ctx context.Context, changeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigurationChangeResultRequestWithBody(c.Server, changeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfigurationChangeResult(ctx context.Context, changeId string, body UpdateConfigurationChangeResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigurationChangeResultRequest(c.Server, changeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPendingConfigurationChangeRequestRequest generates requests for GetPendingConfigurationChangeRequest
func NewGetPendingConfigurationChangeRequestRequest(server string, serviceId string, resourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceId", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceName", runtime.ParamLocationPath, resourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpanse/agent/poll/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConfigurationChangeResultRequest calls the generic UpdateConfigurationChangeResult builder with application/json body
func NewUpdateConfigurationChangeResultRequest(server string, changeId string, body UpdateConfigurationChangeResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConfigurationChangeResultRequestWithBody(server, changeId, "application/json", bodyReader)
}

// NewUpdateConfigurationChangeResultRequestWithBody generates requests for UpdateConfigurationChangeResult with any type of body
func NewUpdateConfigurationChangeResultRequestWithBody(server string, changeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "changeId", runtime.ParamLocationPath, changeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/xpanse/agent/update/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPendingConfigurationChangeRequestWithResponse request
	GetPendingConfigurationChangeRequestWithResponse(ctx context.Context, serviceId string, resourceName string, reqEditors ...RequestEditorFn) (*GetPendingConfigurationChangeRequestResponse, error)

	// UpdateConfigurationChangeResultWithBodyWithResponse request with any body
	UpdateConfigurationChangeResultWithBodyWithResponse(ctx context.Context, changeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigurationChangeResultResponse, error)

	UpdateConfigurationChangeResultWithResponse(ctx context.Context, changeId string, body UpdateConfigurationChangeResultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigurationChangeResultResponse, error)
}

type GetPendingConfigurationChangeRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceConfigurationChangeRequest
	JSON400      *Response
	JSON401      *Response
	JSON403      *Response
	JSON408      *Response
	JSON422      *Response
	JSON500      *Response
	JSON502      *Response
}

// Status returns HTTPResponse.Status
func (r GetPendingConfigurationChangeRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPendingConfigurationChangeRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConfigurationChangeResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Response
	JSON401      *Response
	JSON403      *Response
	JSON408      *Response
	JSON422      *Response
	JSON500      *Response
	JSON502      *Response
}

// Status returns HTTPResponse.Status
func (r UpdateConfigurationChangeResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConfigurationChangeResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPendingConfigurationChangeRequestWithResponse request returning *GetPendingConfigurationChangeRequestResponse
func (c *ClientWithResponses) GetPendingConfigurationChangeRequestWithResponse(ctx context.Context, serviceId string, resourceName string, reqEditors ...RequestEditorFn) (*GetPendingConfigurationChangeRequestResponse, error) {
	rsp, err := c.GetPendingConfigurationChangeRequest(ctx, serviceId, resourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPendingConfigurationChangeRequestResponse(rsp)
}

// UpdateConfigurationChangeResultWithBodyWithResponse request with arbitrary body returning *UpdateConfigurationChangeResultResponse
func (c *ClientWithResponses) UpdateConfigurationChangeResultWithBodyWithResponse(ctx context.Context, changeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigurationChangeResultResponse, error) {
	rsp, err := c.UpdateConfigurationChangeResultWithBody(ctx, changeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigurationChangeResultResponse(rsp)
}

func (c *ClientWithResponses) UpdateConfigurationChangeResultWithResponse(ctx context.Context, changeId string, body UpdateConfigurationChangeResultJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigurationChangeResultResponse, error) {
	rsp, err := c.UpdateConfigurationChangeResult(ctx, changeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigurationChangeResultResponse(rsp)
}

// ParseGetPendingConfigurationChangeRequestResponse parses an HTTP response from a GetPendingConfigurationChangeRequestWithResponse call
func ParseGetPendingConfigurationChangeRequestResponse(rsp *http.Response) (*GetPendingConfigurationChangeRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPendingConfigurationChangeRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceConfigurationChangeRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseUpdateConfigurationChangeResultResponse parses an HTTP response from a UpdateConfigurationChangeResultWithResponse call
func ParseUpdateConfigurationChangeResultResponse(rsp *http.Response) (*UpdateConfigurationChangeResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConfigurationChangeResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}
